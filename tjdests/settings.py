# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from . import settings_secret
"""
Django settings for tjdests project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_DIR = os.path.join(BASE_DIR, "tjdests")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "") == "TRUE"

PRODUCTION = os.getenv("PRODUCTION", "") == "TRUE"

if not DEBUG:
    ALLOWED_HOSTS = ("127.0.0.1",)
else:
    ALLOWED_HOSTS = []


AUTH_USER_MODEL = "destinations.User"

EMAIL_FROM = "noreply@tjhsst2016.com"

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'captcha',
    'maintenancemode',
    'tjdests.destinations'
)


if PRODUCTION:
    DEBUG = False
    ALLOWED_HOSTS = ["*.*.*.*", "127.0.0.1"]
    INSTALLED_APPS += ("django.contrib.sites",)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'tjdests.middleware.access_log.AccessLogMiddleWare',
)

ROOT_URLCONF = 'tjdests.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': (
            os.path.join(PROJECT_DIR, "templates/"),
        ),
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tjdests.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(PROJECT_DIR, "static/"),
)

LOG_LEVEL = "DEBUG" if not PRODUCTION else "INFO"
_log_levels = ("DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL")
if os.getenv("LOG_LEVEL", None) in _log_levels:
    LOG_LEVEL = os.environ["LOG_LEVEL"]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "simple": {
            "format": "%(levelname)s: %(message)s"
        },
        "access": {
            "format": "%(message)s"
        }
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "console_access": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "access"
        },
        "access_log": {
            "level": "DEBUG",
            "filters": ["require_debug_false"],
            "class": "logging.FileHandler",
            "formatter": "access",
            "filename": ("/var/tjdests/app_access.log" if PRODUCTION else "./app_access.log"),
            "delay": True
        },
        "auth_log": {
            "level": "DEBUG",
            "filters": ["require_debug_false"],
            "class": "logging.FileHandler",
            "formatter": "access",
            "filename": ("/var/tjdests/app_auth.log" if PRODUCTION else "./app_auth.log"),
            "delay": True
        },
        "error_log": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "logging.FileHandler",
            "delay": True,
            "filename": ("/var/tjdests/app_error.log" if PRODUCTION else "./app_error.log")
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins"] + (["error_log"] if PRODUCTION else []),
            "level": "ERROR",
            "propagate": True,
        },
        "tjdests": {
            "handlers": ["console", "mail_admins"] + (["error_log"] if PRODUCTION else []),
            "level": LOG_LEVEL,
            "propagate": True,
        },
        "tjdests_access": {
            "handlers": ["console_access"] + (["access_log"] if PRODUCTION else []),
            "level": "DEBUG",
            "propagate": False
        },
        "tjdests_auth": {
            "handlers": ["console_access"] + (["auth_log"] if PRODUCTION else []),
            "level": "DEBUG",
            "propagate": False
        }
    }
}
